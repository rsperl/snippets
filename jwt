#!/usr/bin/env python3

"""
command line client
"""

import argparse
import json
import os
import sys
from datetime import datetime
from typing import Sequence
import base64

import jwt


#
# start of defaults
#

# where invocation history is stored
SCRIPT_NAME = os.path.basename(sys.argv[0]).split(".")[0]
ALGORITHMS = ["HMAC256", "HS256", "HMAC256"]


def parse_args(argv: Sequence[str]) -> argparse.Namespace:
    # https://docs.python.org/3/library/argparse.html
    p = argparse.ArgumentParser(
        description=f"decode jwt",
    )

    sp = p.add_subparsers(title="action", required=True, dest="action")

    decode = sp.add_parser("decode", help="decode jwt token")
    decode.add_argument("encoded_token", help="encoded jwt token")
    decode.add_argument("--key", default="", help="key to verify signature")
    decode.add_argument(
        "--format-timestamps", action="store_true", help="format timestamps"
    )
    decode.set_defaults(func=handle_decode)

    encode = sp.add_parser("encode", help="encode a jwt token")
    encode.add_argument("payload", help="json jwt token")
    encode.add_argument("--key", default="", help="key to verify signature")
    encode.add_argument("--exp", required=False, help="expiration time")
    encode.add_argument(
        "--iat",
        default="now",
        required=False,
        help="expiration time (either 'now' or an epoch)",
    )
    encode.add_argument("--iss", required=False, help="issuer")
    encode.add_argument(
        "--algorithm", default="HS256", choices=ALGORITHMS, help="encoding algorithm"
    )
    encode.set_defaults(func=handle_encode)
    args = p.parse_args(argv)
    # do post-processing and validation

    return args


def handle_encode(args: argparse.Namespace) -> int:
    try:
        payload = json.loads(args.payload)
        if args.iat:
            if args.iat == "now":
                payload["iat"] = datetime.now()
            else:
                payload["iat"] = args.iat
        if args.exp:
            payload["exp"] = args.iat
        if args.iss:
            payload["iss"] = args.iss
        print(jwt.encode(payload, key=args.key, algorithm=args.algorithm))
        return 0
    except Exception as e:
        m = ""
        m += f"Exception Type: {e.__class__.__name__}\n"
        m += f"Exception Msg:  {e}\n"
        m += f"Algorithm:      {args.algorithm}\n"
        m += f"Key:            {args.key}\n"
        m += f"Payload:\n{args.payload}\n"
        print(m, file=sys.stderr)
    return 1


def handle_decode(args: argparse.Namespace) -> int:
    options = {}
    if not args.key:
        print("--key not given, so signature validation will be skipped")
        options["verify_signature"] = False

    try:
        decoded = jwt.decode(
            args.encoded_token, args.key, options=options, algorithms=ALGORITHMS
        )
    except Exception as e:
        print(f"invalid token ({e.__class__.__name__}): {e}", file=sys.stderr)
        return 1

    if args.format_timestamps:
        for field in ["iat", "exp", "nbf"]:
            if field in decoded:
                decoded[field + "_fmt"] = datetime.fromtimestamp(
                    decoded[field]
                ).strftime("%Y-%m-%d %H:%M:%S")

    print(json.dumps(decoded, indent=2, sort_keys=True))
    return 0


if __name__ == "__main__":
    args = parse_args(sys.argv[1:])
    sys.exit(args.func(args))
